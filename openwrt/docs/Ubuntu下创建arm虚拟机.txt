一、环境说明
host: 
	host-os:  Ubuntu 16 4.4.0-146-generic x86_64
	host-cpu:  Intel(R) Core(TM) i7-5557U CPU @ 3.10GHz

guest:
	guest-os:  OpenWrt 4.14.118 armv7l
	guest-cpu: ARMv7 Processor rev 1 (v7l)

二、在Qemu-ARM 中运行OpenWrt
1、使用initramfs启动
	这是可用于测试图像的最简单方法。但是，它完全在RAM中运行：任何修改都会在重新启动时丢失。
	使用此引导方法运行的命令如下，此处使用64 MB的RAM：
	qemu-system-arm -nographic -M virt -m 64 -kernel openwrt-armvirt-32-zImage-initramfs

2、网络配置
	QEMU提供了几种为虚拟机提供网络连接的选项，下面只介绍几种基础的，请参阅qemu的帮助手册查看所有-net选项。
	1）提供对OpenWrt的Internet访问
		QEMU的默认网络模式是“用户模式网络堆栈user mode network stack”。
		在此模式下，qemu充当outbound TCP / UDP连接的代理。它还为虚拟机提供DHCP和DNS服务。
		要提供对模拟的OpenWrt系统的Internet访问，请使用如下命令：
		qemu-system-arm -net nic,vlan=0 -net nic,vlan=1 -net user,vlan=1 \
			-nographic -M virt -m 64 -kernel openwrt-armvirt-32-zImage-initramfs 
			
		#qemu-system-arm -M virt -net nic,model=virtio -nographic -m 64 -kernel openwrt-armvirt-32-zImage-initramfs 
		在这里，我们在模拟的OpenWrt系统中设置了两个网卡：
			eth0：用作OpenWrt中的LAN（此处未连接任何内容）
			eth1：在OpenWrt中用作WAN，并连接到qemu，qemu将代理所有到Internet的TCP/UDP连接。
		OpenWrt系统应该在eth1上获得IPv4和IPv6（通过DHCP/DHCPv6）。 
		范围将是10.0.2.0/24和fec0 ::/64（qemu默认值，请参阅qemu以配置其他范围））。
	
		PS:上述方法在我自己的机器上无法创建网卡，报错如下：(但采用“提供对OpenWrt内部LUCI的访问”中的方法创建的网卡是OK的)
			Warning: requested NIC (anonymous, model unspecified) was not created (not supported by this machine?)

		2019.5.22：再次尝试设置internet访问：
			尝试1：
			qemu-system-arm -net nic,vlan=0 -net nic,vlan=1 -net user,vlan=1 -nographic -M virt -m 64 -kernel openwrt-armvirt-32-zImage-initramfs 
			报错：
			Warning: hub port hub1port0 has no peer
			Warning: vlan 1 with no nics
			Warning: hub port hub0port0 has no peer
			Warning: netdev hub0port0 has no peer
			Warning: netdev hub1port0 has no peer
			Warning: requested NIC (anonymous, model unspecified) was not created (not supported by this machine?)
			Warning: requested NIC (anonymous, model unspecified) was not created (not supported by this machine?)

			尝试2：
			qemu-system-arm -net nic,vlan=0 -net user,vlan=0 -nographic -M virt -m 64 -kernel openwrt-armvirt-32-zImage-initramfs 
			报错：
			Warning: hub port hub0port0 has no peer
			Warning: vlan 0 with no nics
			Warning: netdev hub0port0 has no peer
			Warning: requested NIC (anonymous, model unspecified) was not created (not supported by this machine?)

			尝试3：
			qemu-system-arm -netdev tap,ifname=tap0,script=no,downscript=no,id=my_owrt -device driver=virtio-net,netdev=my_owrt -nographic -M virt -m 64 -kernel openwrt-armvirt-32-zImage-initramfs 
			没有前面的报错，但是没有出去的路由，需要配置，继续寻找配置方法。
			参考文章：
			https://unix.stackexchange.com/questions/214039/qemu-aarch64-and-networking-connections
			
			尝试4：
			需要参考文章： https://wiki.qemu.org/Documentation/Networking
			
			OK: qemu-system-arm -netdev tap,ifname=tap0,script=no,downscript=no,id=my_owrt -device driver=virtio-net,netdev=my_owrt -nographic -M virt -m 64 -kernel openwrt-armvirt-32-zImage-initramfs 
			
			qemu-system-arm -net tap -net nic -nographic -M virt -m 64 -kernel openwrt-armvirt-32-zImage-initramfs 
			
			
			
sudo qemu-system-aarch64 -machine virt -cpu cortex-a57 -nographic -smp 1 -m 512 \
    -global virtio-blk-device.scsi=off -device virtio-scsi-device,id=scsi \
    -drive file=ubuntu-core-14.04.1-core-arm64.img,id=coreimg,cache=unsafe,if=none -device scsi-hd,drive=coreimg \
    -kernel vmlinuz-3.13.0-55-generic \
    -initrd initrd.img-3.13.0-55-generic \
    -netdev user,id=unet -device virtio-net-device,netdev=unet \
    -net nic -net tap,ifname=tap0,script=no,downscript=no \
    --append "console=ttyAMA0 root=/dev/sda"
	
		




	2）提供对OpenWrt内部LUCI的访问
		LUCI是OpenWrt使用的Web UI。 如果你想检查LUCI的工作方式或者使用LUCI-apps，(下面)这个设置适合你。
		注意：此设置需要一些权限（Linux下的CAP_NET_ADMIN和CAP_MKNOD），因此在sudo下运行它更容易。
		需要适配修改IMAGE变量为你的OpenWrt版本（LAN变量也可以修改），然后在sudo下运行它
			#!/bin/sh
			IMAGE=openwrt-armvirt-32-zImage-initramfs                               
			LAN=openwrttap0
			# create tap interface which will be connected to OpenWrt LAN NIC
			ip tuntap add mode tap $LAN
			ip link set dev $LAN up
			# configure interface with static ip to avoid overlapping routes                         
			ip addr add 192.168.1.101/24 dev $LAN
			qemu-system-arm \
				-device virtio-net-pci,netdev=lan \
				-netdev tap,id=lan,ifname=$LAN,script=no,downscript=no \
				-device virtio-net-pci,netdev=wan \
				-netdev user,id=wan \
				-M virt -nographic -m 64 -kernel $IMAGE
			# cleanup. delete tap interface created earlier
			ip addr flush dev $LAN
			ip link set dev $LAN down
			ip tuntap del mode tap dev $LAN

	（上面配置中的）网络如何运作：
		eth0：在OpenWrt中用作LAN，并连接到主机系统中的openwrttap0（静态地址192.168.1.101/24），提供对LUCI的访问，网址为http://192.168.1.1
		eth1：在OpenWrt中用作WAN，并连接到qemu，它将代理所有到Internet的TCP / UDP连接
		说明：snapshot版本不含LUCI，访问http://192.168.1.1会报错，网页提示“192.168.1.1 拒绝了我们的连接请求”。

	3）使用KVM igb网络接口：这部分不展开。

3、高级启动方法
	1）使用KVM加速
	这将更快，但只有在host的CPU的架构与目标虚拟机的CPU相同时才会起作用。
	qemu-system-arm -nographic -M virt,accel=kvm -cpu host -m 64 -kernel openwrt-armvirt-32-zImage-initramfs

	2）使用单独的rootfs引导
	qemu-system-arm -nographic -M virt -m 64 -kernel openwrt-armvirt-32-zImage \
		-drive file=openwrt-armvirt-32-root.ext4,format=raw,if=virtio -append 'root=/dev/vda rootwait'


	qemu-system-arm -nographic -M virt -m 64 -kernel openwrt-armvirt-32-zImage -drive file=openwrt-armvirt-32-root.ext4,format=raw,if=virtio -append 'root=/dev/vda rootwait'
		
	3）使用本地目录作为rootfs引导。
		qemu-system-arm -nographic -M virt -m 64 -kernel openwrt-armvirt-32-zImage \
	  -fsdev local,id=rootdev,path=root-armvirt/,security_model=none \
	  -device virtio-9p-pci,fsdev=rootdev,mount_tag=/dev/root \
	  -append 'rootflags=trans=virtio,version=9p2000.L,cache=loose rootfstype=9p'
	
		如果没有 root-armvirt目录，则启动报错。
		创建了该目录后启动不报错，但是内核panic。 这里不继续往下处理了。
	
	4）用kvmtool运行
		# start a named machine
		lkvm run -k openwrt-armvirt-32-zImage -i openwrt-armvirt-32-rootfs.cpio --name armvirt0

		# start with virtio-9p rootfs
		lkvm run -k openwrt-armvirt-32-zImage -d root-armvirt/

		# stop "armvirt0"
		lkvm stop --name armvirt0

		# stop all
		lkvm stop --all


三、一个实际的例子
	xxxx介绍
	1）为虚拟化准备debian（测试中为7.1）
	2）虚拟化



	